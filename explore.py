# This will be my Data Exploration Module for my Social Vulnerability Project

########################### General Imports ####################################
import pandas as pd
import numpy as np

########################### Explore Imports ####################################
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import pearsonr, spearmanr

####################### Initial Exploration ####################################

def plot_univariate(df):
    '''
    This function takes in my recently cleaned county-level svi and voter turnout data,
    and plots histograms and boxplots for each individual variable.
    '''
    
    col_list = list(df)
    
    for col in col_list:
        plt.figure(figsize=(16,4))
        plt.subplot(1, 2, 1)
        sns.histplot(data = df, x = col, kde=True)
        plt.title(col)
        plt.subplot(1, 2, 2)
        sns.boxplot(x=col, data=df)
        plt.title(col)
        plt.show()
        
        
def plot_bivariate(df, target):
    '''
    This function takes in my recently cleaned county-level svi and voter turnout data,
    and plots lmplots each individual variable vs the target.    
    '''
    
    col_list = list(df.drop(columns=(target)))
    
    for col in col_list:
        plt.figure(figsize=(8,2))
        sns.lmplot(x=col, y=target, data=df, scatter=True, hue=None, col=None)
        plt.title('col vs target')
        plt.show()
        
        
def texas_heatmap(df):
    '''
    This function takes in my recently cleaned county-level svi and voter turnout data,
    creates a correlation table, and plots a heatmap.
    '''
    # Make correlation table
    df_corr = df.corr()
    
    # Plot heatmap
    plt.figure(figsize=(12,6))
#     sns.color_palette("vlag", as_cmap=True)
    sns.heatmap(df_corr, cmap='vlag', annot=True, linewidth=0.5, mask= np.triu(df_corr))
    
    return df_corr



def hypothesis_testing(df, target, alpha=0.05):
    '''
    This function takes in my recently cleaned county-level svi and voter turnout data,
    runs pearsonr correlation tests on each variable against the target, returns correlation coefficient, P-value,
    and plots a jointplot.
    '''
    
    col_list = list(df.drop(columns=(target)))
    
    for col in col_list:
        print('')
        print(f'Null Hypothesis: There is no relationship between {col} and {target}, (they are independent variables)')
        print(f'Alternative Hypothesis: There is a relationship between {col} and {target}, (they are dependent variables)')
        print('')
        r, p_value = pearsonr(df[col], df[target])
        print(f'Target: {target}')
        print(f'Variable: {col}')
        print(f'Correlation Coefficient: {r.round(4)}')
        print(f'P-value: {p_value.round(4)}')
        print(f'alpha: {alpha}')
        if p_value < alpha:
            print('Becasue p_value < alpha, we reject the null hypothesis.')
        else:
            print('Because p_value >= alpha, we fail to reject the null hypothesis.')
        
        sns.jointplot(x=col, y=target, data=df,  kind='reg', height=5)
        plt.title('col vs target')
        plt.show()
        
        print('---------------------------------------------------------------------------------')
        
def plot_models(y_validate):
    '''
    This function plots the best initial models.
    '''
    
    plt.figure(figsize=(16,8))
    plt.plot(y_validate['turnout_percent'], y_validate['turnout_pred_mean'], alpha=.5, color="gray", label='_nolegend_')
    plt.annotate("Baseline: Predict Using Mean", (.175, .07))
    plt.plot(y_validate['turnout_percent'], y_validate['turnout_percent'], alpha=.5, color="blue", label='_nolegend_')
    plt.annotate("The Ideal Line: Predicted = Actual", (.175, .15), rotation=22.5)

    plt.scatter(y_validate['turnout_percent'], y_validate['turnout_pred_lm'], 
                alpha=.5, color="red", s=100, label="Model: LinearRegression")
    plt.scatter(y_validate['turnout_percent'], y_validate['turnout_pred_glm'], 
                alpha=.5, color="yellow", s=100, label="Model: TweedieRegressor")
    plt.legend()
    plt.xlabel("Actual Turnout Percent")
    plt.ylabel("Predicted Turnout Percent")
    plt.title("Where are predictions more extreme? More modest?")
    plt.show()